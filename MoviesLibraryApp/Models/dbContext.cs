// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace MoviesLibraryApp.Models;

public partial class dbContext : DbContext
{
    public dbContext()
    {
    }

    public dbContext(DbContextOptions<dbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Actor> Actors { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Medium> Media { get; set; }

    public virtual DbSet<Movie> Movies { get; set; }

    public virtual DbSet<MovieActor> MovieActors { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlite("Data Source=H:\\ProjectsC#\\MoviesLibraryApp\\MoviesLibraryApp\\movies.db");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Actor>(entity =>
        {
            entity.ToTable("Actor");

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.ToTable("Category");

            entity.Property(e => e.Id).HasColumnName("id");
        });

        modelBuilder.Entity<Medium>(entity =>
        {
            entity.HasIndex(e => e.Id, "IX_Media_id").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
        });

        modelBuilder.Entity<Movie>(entity =>
        {
            entity.ToTable("Movie");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Rating).HasColumnType("NUMERIC");
            entity.Property(e => e.Watched).HasColumnType("TEXT");
            entity.Property(e => e.PublishDate).HasColumnType("TEXT");
            entity.Property(e => e.WatchedDate).HasColumnType("TEXT");

            entity.HasOne(d => d.Category).WithMany(p => p.Movies).HasForeignKey(d => d.CategoryId);

            entity.HasOne(d => d.Media).WithMany(p => p.Movies).HasForeignKey(d => d.MediaId);
        });

        modelBuilder.Entity<MovieActor>(entity =>
        {
            // Ορίζουμε συμπληρωματικό Primary Key(Many - to - Many)
            entity.HasKey(ma => new { ma.MovieId, ma.ActorId });

            // Σχέση: Movie 1 -> Many MovieActors
            entity.HasOne(ma => ma.Movie)
                  .WithMany(m => m.MovieActors)
                  .HasForeignKey(ma => ma.MovieId);
            //.OnDelete(DeleteBehavior.Cascade);


            // Σχέση: Actor 1 -> Many MovieActors
            entity.HasOne(ma => ma.Actor)
                  .WithMany(a => a.MovieActors)
                  .HasForeignKey(ma => ma.ActorId);
                  //.OnDelete(DeleteBehavior.Restrict);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}